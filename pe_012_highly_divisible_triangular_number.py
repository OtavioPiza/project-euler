from functools import reduce

# == Project Euler: Problem 12 ======================================================================================= #
from pe_000_utils import timed, print_answers

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

# == Solution 1 ====================================================================================================== #


@timed
def solution_1(min_divisors=6):
    previous_divisors = 0
    k = 1

    while True:
        k_divisors = reduce(lambda total, number: total + 1 if not k % number else total, range(1, k + 1))
        divisors = previous_divisors + k_divisors

        if divisors >= min_divisors:
            return (k * (k + 1)) / 2

        k += 1
        previous_divisors = k_divisors


if __name__ == '__main__':
    print_answers('Largest Product in a Grid', solution_1)
