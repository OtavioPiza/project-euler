from functools import reduce
from math import sqrt
from typing import Tuple, Iterable
from pe_000_utils import timed, print_answers

# == Project Euler: Problem 12 ======================================================================================= #

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

# == Solution 1 ====================================================================================================== #


def next_candidate() -> Iterable:
    number = 9

    while True:

        if number % 10 == 3:
            number += 4

        else:
            number += 2

        yield number


def get_primes(quantity: int) -> Tuple[int]:
    primes = [2, 3, 5, 7]

    for number in next_candidate():
        is_prime = True

        for divisor in primes:

            if divisor > sqrt(number) + 1:
                break

            if not number % divisor:
                is_prime = False
                break

        if is_prime:
            primes.append(number)

        if len(primes) == quantity:
            return tuple(primes)


@timed
def solution_1(min_divisors=500):
    current_divisors = 0
    number = 0

    while True:
        number += 1
        triangular_number = number * (number + 1) // 2
        current_divisors = 2

        for divisor in range(2, triangular_number):
            if not triangular_number % divisor:
                current_divisors += 1

        if current_divisors > min_divisors:
            return triangular_number


if __name__ == '__main__':
    get_primes(500)