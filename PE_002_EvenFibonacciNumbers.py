from PE_000_Utils import timed, print_answers

# == Project Euler: Problem 2 ==================================================================== #
"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the
sum of the even-valued terms.
"""

# == Common Code ================================================================================= #


def get_fibonacci_sequence(upper_bound):
    sequence = [1, 2]

    while True:
        num = sequence[-1] + sequence[-2]

        if num > upper_bound:
            break

        else:
            sequence.append(num)

    return sequence


# == Solution 1 ================================================================================== #


@timed
def solution_1(upper_bound=4000000):
    total = 0

    for number in get_fibonacci_sequence(upper_bound):

        if number % 2 == 0:
            total += number

    return total


# == Solution 2 ================================================================================== #

@timed
def solution_2(upper_bound=4000000):
    """
    Solution 1 Refactored

    :param upper_bound:
    :return:
    """

    return sum(filter(lambda number: not number % 2, get_fibonacci_sequence(upper_bound)))


if __name__ == '__main__':
    print_answers('Even Fibonacci Numbers', solution_1, solution_2)
